// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  hashedpassword  String?
  image           String?
  emailVerified   Boolean   @default(false)
  emailVerifiedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  workspace Workspace?
  accountId String?    @unique
  account   Account?

  Session           Session[]
  OAuth             OAuth[]
  VerificationToken VerificationToken[]
}

enum Plan {
  Basic
  Premium
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

enum type {
  public
  private
}

model Workspace {
  id   String @id @default(cuid())
  slug String @unique

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  type          type       @default(public)
  plan          Plan       @default(Basic)
  totalMessages Int?       @default(0)
  totalViews    Int?       @default(0)
  totalClicks   Int?       @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  Messages      Messages[]

  @@unique([id, slug, userId])
  @@index([userId, id, totalMessages])
}

model Messages {
  id          String    @id @default(cuid())
  workspaceId String
  slug        String?
  content     String
  views       Int       @default(0)
  clicks      Int       @default(0)
  IpAddress   String?
  source      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId, content, views])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@unique([identifier, token])
}

model OAuth {
  id                String  @id @default(cuid())
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires           Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}
